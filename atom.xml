<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Fei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liutengfei0706.github.io/"/>
  <updated>2020-02-17T16:14:04.942Z</updated>
  <id>https://liutengfei0706.github.io/</id>
  
  <author>
    <name>Liu Tengfei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>递归</title>
    <link href="https://liutengfei0706.github.io/2020/02/17/%E9%80%92%E5%BD%92/"/>
    <id>https://liutengfei0706.github.io/2020/02/17/%E9%80%92%E5%BD%92/</id>
    <published>2020-02-17T06:03:18.230Z</published>
    <updated>2020-02-17T16:14:04.942Z</updated>
    
    <content type="html"><![CDATA[<p>递归是一种非常高效、简洁的编码技巧，它通过一个函数在执行过程中一次或多次调用其本身，或通过一种数据结构在其表示中依赖于相同类型的结构更小的实例来实现。</p><h3 id="递归需要满足的三个条件"><a href="#递归需要满足的三个条件" class="headerlink" title="递归需要满足的三个条件"></a>递归需要满足的三个条件</h3><ol><li>一个问题的解可以分解为几个子问题的解。</li><li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样。</li><li>存在递归终止条件。</li></ol><h3 id="如何编写递归代码"><a href="#如何编写递归代码" class="headerlink" title="如何编写递归代码"></a>如何编写递归代码</h3><p>写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</p><h3 id="递归的优缺点"><a href="#递归的优缺点" class="headerlink" title="递归的优缺点"></a>递归的优缺点</h3><ul><li>优点：代码的表达力很强，写起来简洁。</li><li>缺点：空间复杂度高、有堆栈溢出风险、存在重复计算、过多的函数调用会耗时较多等问题。</li></ul><h3 id="递归常见问题及解决方案"><a href="#递归常见问题及解决方案" class="headerlink" title="递归常见问题及解决方案"></a>递归常见问题及解决方案</h3><ul><li>堆栈溢出：可以声明一个全局变量来控制递归的深度，从而避免堆栈溢出。</li><li>重复计算：记忆化（memoization）可以用来避免这个问题。</li></ul><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。 当函数的调用层数非常多时，调用栈会消耗不少内存，甚至会撑爆内存空间，造成程序严重卡顿或意外崩溃。尾递归的调用栈则特别易于优化，从而可减少内存空间的使用，也能提高运行速度。</p><h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><h4 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">509. 斐波那契数</a></h4><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><blockquote><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p></blockquote><p>给定 N，计算 F(N)。</p><p>示例 ：</p><blockquote><p>输入：2<br>输出：1<br>解释：F(2) = F(1) + F(0) = 1 + 0 = 1.</p></blockquote><blockquote><p>输入：3<br>输出：2<br>解释：F(3) = F(2) + F(1) = 1 + 1 = 2.</p></blockquote><blockquote><p>输入：4<br>输出：3<br>解释：F(4) = F(3) + F(2) = 2 + 1 = 3.</p></blockquote><h5 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> N &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> N</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fib(N - <span class="number">1</span>) + self.fib(N - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>使用递归依次求解，此方法效率较低，重复性求值较为严重。</p><blockquote><p>F(3) = F(2) + F(1) = F(1) + F(0) + F(1) = 1 + 0 + 1 = 2</p></blockquote><p>时间复杂度：O(2^N)，这是计算斐波那契数最慢的方法，因为它需要指数的时间。<br>空间复杂度：O(N)，在堆栈中我们需要与 N 成正比的空间大小。</p><h5 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        cur, prev = self.f(N)</span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, N: int)</span> -&gt; Tuple[int, int]:</span></span><br><span class="line">        <span class="keyword">if</span> N &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> N, <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur, prev = self.f(N - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> cur + prev, cur</span><br></pre></td></tr></table></figure><p>通过使用记忆化的方法，记录求过的值，提高效率。</p><p>时间复杂度：O(N)。<br>空间复杂度：O(N)，内存中使用的堆栈大小。</p><h4 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode-cn.com/problems/letter-case-permutation/" target="_blank" rel="noopener">784. 字母大小写全排列</a></h4><p>给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。</p><p>示例:</p><blockquote><p>输入： S = “a1b2”<br>输出：[“a1b2”, “a1B2”, “A1b2”, “A1B2”]</p></blockquote><blockquote><p>输入：S = “3z4”<br>输出： [“3z4”, “3Z4”]</p></blockquote><blockquote><p>输入：S = “12345”<br>输出：[“12345”]</p></blockquote><p>注意：</p><ul><li>S的长度不超过12。</li><li>S仅由数字和字母组成。</li></ul><h5 id="解法1：-1"><a href="#解法1：-1" class="headerlink" title="解法1："></a>解法1：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCasePermutation</span><span class="params">(self, S: str)</span> -&gt; List[str]:</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(S: List[str], i: int, n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">            <span class="keyword">if</span> i == n:</span><br><span class="line">                ans.append(<span class="string">''</span>.join(S))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            dfs(S, i + <span class="number">1</span>, n)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> S[i].isalpha(): <span class="keyword">return</span></span><br><span class="line">            S[i] = S[i].swapcase() <span class="comment">#交换大小写</span></span><br><span class="line">            dfs(S, i + <span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line">        dfs(list(S), <span class="number">0</span>, len(S))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>采用深度优先搜索，回溯所有的可能结果。</p><p>时间复杂度：O(N * 2^N)。<br>空间复杂度：O(N * 2^N)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;递归是一种非常高效、简洁的编码技巧，它通过一个函数在执行过程中一次或多次调用其本身，或通过一种数据结构在其表示中依赖于相同类型的结构更小的实例来实现。&lt;/p&gt;
&lt;h3 id=&quot;递归需要满足的三个条件&quot;&gt;&lt;a href=&quot;#递归需要满足的三个条件&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
